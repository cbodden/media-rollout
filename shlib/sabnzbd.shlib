_SERVICE_NAME+=( "sabnzbdplus:8080" )

readonly _SAB_HOME="/home/sabnzbd/.sabnzbd"

function _sabnzbdplus_install()
{
    local _FNC_NAME=$(echo ${FUNCNAME} \
        | cut -d_ -f2)

    getent group downloads || groupadd downloads

    if [ -z "$(getent passwd sabnzbd)" ]
    then
        addgroup sabnzbd
        adduser --system sabnzbd --ingroup sabnzbd
        usermod -a -G downloads sabnzbd
    fi

    apt install \
        sabnzbdplus \
        python-sabyenc \
        par2-tbb \
        -y

    sed -i "s|^USER=.*|USER=sabnzbd|g" \
        /etc/default/sabnzbdplus

    sed -i "s|^HOST=.*|HOST=${_IP}|g" \
        /etc/default/sabnzbdplus

    sed -i "s|^PORT=.*|PORT=8080|g" \
        /etc/default/sabnzbdplus

    chown sabnzbd:downloads /${_PATH}/
    chown -R sabnzbd:downloads /${_PATH}/downloads/
    systemctl daemon-reload
    systemctl enable ${_FNC_NAME}
}

function _sabnzbdplus_configure()
{
    local _FNC_NAME=$(echo ${FUNCNAME} \
        | cut -d_ -f2)

    if [[ -z $(systemctl status ${_FNC_NAME}) ]]
    then
        printf "%s\n" \
            "[${RED}***${CLR}] ${_FNC_NAME} not installed"

    else
        printf "%s\n" \
            "[${RED}***${CLR}] Configuring ${_FNC_NAME}"

        mkdir -p ${_SAB_HOME}/admin ${_SAB_HOME}/logs
        touch \
            ${_SAB_HOME}/admin/history1.db \
            ${_SAB_HOME}/admin/Rating.sab \
            ${_SAB_HOME}/logs/sabnzbd.error.log \
            ${_SAB_HOME}/logs/sabnzbd.log

        cp ${PROGDIR}/config_files/sabnzbd.ini ${_SAB_HOME}/

        sed -i "s|^api_key =.*|api_key = 0000|g" \
            ${_SAB_HOME}/sabnzbd.ini

        sed -i "s|^host =.*|host = ${_IP}|g" \
            ${_SAB_HOME}/sabnzbd.ini

        sed -i "s|^download_dir =.*|download_dir = /${_PATH}/download/incomplete|g" \
            ${_SAB_HOME}/sabnzbd.ini

        sed -i "s|^complete_dir =.*|complete_dir = /${_PATH}/download/complete|g" \
            ${_SAB_HOME}/sabnzbd.ini

        sed -i "s|^username =.*|username = ${_UNAME}|g" \
            ${_SAB_HOME}/sabnzbd.ini

        sed -i "s|^password =.*|password = ${_PWORD}|g" \
            ${_SAB_HOME}/sabnzbd.ini

        sed -i "s|^host_whitelist =.*|host_whitelist = $(hostname),|g" \
            ${_SAB_HOME}/sabnzbd.ini

        chown -R sabnzbd:sabnzbd ${_SAB_HOME}
        systemctl daemon-reload
        systemctl restart sabnzbdplus.service
        sleep 4
        curl -s \
            "http://${_IP}:8080/api?mode=config&name=set_apikey&apikey=0000" 2>&1

        rm \
            ${_SAB_HOME}/admin/history1.db \
            ${_SAB_HOME}/admin/Rating.sab \
            ${_SAB_HOME}/logs/sabnzbd.error.log \
            ${_SAB_HOME}/logs/sabnzbd.log

        touch \
            ${_SAB_HOME}/admin/Rating.sab \
            ${_SAB_HOME}/logs/sabnzbd.error.log \
            ${_SAB_HOME}/logs/sabnzbd.log

        chown sabnzbd:downloads /${_PATH}/
        chown -R sabnzbd:downloads /${_PATH}/downloads/
        chown -R sabnzbd:sabnzbd ${_SAB_HOME}
        systemctl restart ${_FNC_NAME}

        printf "%s\n" \
            "[${BLU}***${CLR}] ${_FNC_NAME} configured"

    fi
}

function _sabnzbdplus_remove()
{
    local _FNC_NAME=$(echo ${FUNCNAME} \
        | cut -d_ -f2)

    if [[ -z $(systemctl status ${_FNC_NAME} | grep Active) ]]
    then
        printf "%s\n" \
            "[${BLU}***${CLR}] ${_FNC_NAME} NOT INSTALLED OR DAMAGED"

    else
        printf "%s\n" \
            "[${RED}***${CLR}] ${_FNC_NAME} IS ABOUT TO BE REMOVED"

        _pause

        systemctl stop ${_FNC_NAME}
        systemctl kill ${_FNC_NAME}
        systemctl disable ${_FNC_NAME}
        sleep 5
        rm /etc/default/sabnzbdplus
        apt remove \
            sabnzbdplus \
            python-sabyenc \
            par2-tbb \
            -y

        apt purge \
            --auto-remove \
            sabnzbdplus \
            -y

        systemctl daemon-reload

        userdel sabnzbd

        printf "%s\n" \
            "[${BLU}***${CLR}] ${_FNC_NAME} HAS BEEN REMOVED"

    fi
}
