_SERVICE_NAME+=( "lidarr:8686" )

readonly _LR_HOME="/home/lidarr/.config/Lidarr"

function _lidarr_install()
{
    local _FNC_NAME=$(echo ${FUNCNAME} \
        | cut -d_ -f2)

    getent group downloads || groupadd downloads

    if [ -z "$(getent passwd ${_FNC_NAME})" ]
    then
        addgroup ${_FNC_NAME}
        adduser --system ${_FNC_NAME} --ingroup ${_FNC_NAME}
        usermod -a -G downloads ${_FNC_NAME}
    fi

    cd /opt/

    _LR_ADDY="https://github.com/lidarr/Lidarr/releases"

    _LR_RLS_PATH="$(curl -s ${_LR_ADDY} \
        | grep "linux.tar.gz" \
        | head -n 1 \
        | cut -d\" -f2 )"

    _LR_DLD_PATH="$(echo ${_LR_RLS_PATH} \
        | cut -d'/' -f6-7 )"

    wget ${_LR_ADDY}/download/${_LR_DLD_PATH}

    tar -xzvf ${_LR_DLD_PATH##*/}
    chown -R lidarr:lidarr /opt/Lidarr/

    cat <<EOF >/etc/systemd/system/lidarr.service
    [Unit]
    Description=Lidarr Daemon
    After=syslog.target network.target

    [Service]
    User=lidarr
    Group=lidarr
    Type=simple
    ExecStart=/usr/bin/mono /opt/Lidarr/Lidarr.exe -nobrowser
    TimeoutStopSec=20
    KillMode=process
    Restart=on-failure

    [Install]
    WantedBy=multi-user.target
EOF

    chown -R lidarr:downloads /${_PATH}/music
    systemctl daemon-reload
    systemctl enable ${_FNC_NAME}
}

function _lidarr_configure()
{
    local _FNC_NAME=$(echo ${FUNCNAME} \
        | cut -d_ -f2)

    if [[ -z $(systemctl status ${_FNC_NAME}) ]]
    then
        printf "%s\n" \
            "[${RED}***${CLR}] ${_FNC_NAME} not installed"

    else
        printf "%s\n" \
            "[${RED}***${CLR}] Configuring ${_FNC_NAME}"

        systemctl start ${_FNC_NAME}
        sleep 5
        systemctl stop ${_FNC_NAME}

        local _SAB_API=$(cat ${_SAB_HOME}/sabnzbd.ini \
            | awk '/^api_key/ {print $3}')

        local _NH_API=$(yq read ${_NH_HOME}/nzbhydra.yml main.apiKey)

        rm -rf ${_LR_HOME}/*

        cat ${PROGDIR}/config_files/lidarr_BASE-EDIT.sql \
            | sed "/\bSABnzbd\b/s|\bRM_SH\b|${_IP}|g" \
            | sed "/\bSABnzbd\b/s/\bRM_SP\b/8080/g" \
            | sed "/\bSABnzbd\b/s/\bRM_SA\b/${_SAB_API}/g" \
            | sed "/\bNZBHydra2\b/s|\bRM_NH\b|${_IP}|g" \
            | sed "/\bNZBHydra2\b/s/\bRM_NP\b/5076/g" \
            | sed "/\bNZBHydra2\b/s/\bRM_NA\b/${_NH_API}/g" \
            >> ${_LR_HOME}/lidarr.sql

        echo .exit | sqlite3 -init ${_LR_HOME}/lidarr.sql ${_LR_HOME}/lidarr.db
        chown -R lidarr:lidarr ${_LR_HOME}
        systemctl start ${_FNC_NAME}

        printf "%s\n" \
            "[${BLU}***${CLR}] ${_FNC_NAME} configured"

    fi
}

function _lidarr_remove()
{
    local _FNC_NAME=$(echo ${FUNCNAME} \
        | cut -d_ -f2)

    if [[ -z $(systemctl status ${_FNC_NAME} | grep Active) ]]
    then
        printf "%s\n" \
            "[${BLU}***${CLR}] ${_FNC_NAME} NOT INSTALLED OR DAMAGED"

    else
        printf "%s\n" \
            "[${RED}***${CLR}] ${_FNC_NAME} IS ABOUT TO BE REMOVED"

        _pause

        systemctl stop ${_FNC_NAME}
        systemctl kill ${_FNC_NAME}
        systemctl disable ${_FNC_NAME}
        sleep 5
        rm -r /opt/Lidarr/
        rm /etc/systemd/system/lidarr.service
        systemctl daemon-reload

        userdel ${_FNC_NAME}

        printf "%s\n" \
            "[${BLU}***${CLR}] ${_FNC_NAME} HAS BEEN REMOVED"

    fi
}
